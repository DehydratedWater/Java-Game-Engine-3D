#version 400 core

in vec3 position;
in vec2 texturesCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float Visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;
uniform float SetLightUp;
uniform float gestoscMgly = 0.007;

uniform float numberOfRows;
uniform vec2 offset;

const float przejscieMgly = 1.5;

void main(void)
{
	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position =  projectionMatrix * positionRelativeToCam;
	pass_textureCoordinates = (texturesCoordinates/numberOfRows)+offset;
	
	vec3 actualNormal = normal;
	if(SetLightUp >0.5)
	{
		actualNormal = vec3(0.0,1.0,0.0);	//ustawia wektory swiat³a do góry
	}
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix)*vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	Visibility = exp(-pow((distance*gestoscMgly),przejscieMgly));
	Visibility = clamp(Visibility, 0.0,1.0);
}